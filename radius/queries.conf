open_query = "set statement_timeout to 500"

client_query = "select  id, nasname, shortname, type, ports, secret, server, community, description from radius.client"

authorize_check_query = "SELECT id, username as UserName, 'Cleartext-Password' as Attribute, password as Value, ':=' as Op \
  FROM radius.hotspot_auth_check \
  WHERE username='%{User-Name}' and mac='%{Calling-Station-Id}';"

authorize_group_check_query = "\
  SELECT id, GroupName, Attribute, Value, op \
  FROM radius.hotspot_group_check \
  WHERE GroupName = '%{${group_attribute}}' \
  ORDER BY id"

authorize_group_reply_query = "\
  SELECT id, GroupName, Attribute, Value, op \
  FROM radius.hotspot_group_reply \
  WHERE GroupName = '%{${group_attribute}}' \
  ORDER BY id"

group_membership_query = "\
  select profile as GroupName from ( \
  SELECT profile,1 as priority  from radius.hotspot_group where profile='%{Called-Station-Id}' \
  UNION SELECT profile,2 as priority  from radius.hotspot_group where profile='%{NAS-Identifier}' \
  order by priority) as profiles"

simul_count_query = "\
  SELECT COUNT(*) \
  FROM radius.accounting \
  WHERE username='%{User-Name}' \
  AND termination_cause IS NULL"


post-auth {

  query = "\
    INSERT INTO radius.accounting \
    (username,mac,called,nas,ip,nas_ip,class,termination_cause, location_id) \
    VALUES ('%{User-Name}','%{Calling-Station-Id}','%{Called-Station-Id}','%{NAS-Identifier}', \
      '%{Framed-IP-Address}','%{NAS-IP-Address}' \
      ,(convert_from(decode(substring('%{reply:Class}' from 3),'hex'),'UTF8'))::uuid , 0, '%{WISPr-Location-ID}')"

}

accounting {
  reference = "%{tolower:type.%{%{Acct-Status-Type}:-%{Request-Processing-Stage}}.query}"
  type {

    accounting {
         query = "SELECT true"
    }

    accounting-on {
      query = "UPDATE radius.accounting SET termination_cause = 11 WHERE nas='%{NAS-Identifier}' and termination_cause ISNULL"
    }
    accounting-off {
      query = "${..accounting-on.query}"
    }
    
    cols = "username, mac, nas, called, \
      time_start, time_end, ip, nas_ip, \
      location_id, location_name, session, class"
      
    cols2 = "uptime, upload, download, upload_packets, download_packets"
      
    values = "'%{User-Name}','%{Calling-Station-Id}','%{NAS-Identifier}','%{Called-Station-Id}', \
      TO_TIMESTAMP(%{expr: %l - %{%{Acct-Session-Time}:-0} - %{%{Acct-Delay-Time}:-0}}), TO_TIMESTAMP(%{expr: %l - %{%{Acct-Delay-Time}:-0}}), \
      '%{Framed-IP-Address}','%{NAS-IP-Address}', \
      '%{WISPr-Location-ID}', '%{WISPr-Location-Name}', '%{Acct-Session-Id}',\
      (convert_from(decode(substring('%{Class}' from 3),'hex'),'UTF8'))::uuid"

    values2 = "%{Acct-Session-Time}* interval '1 second', %{Acct-Input-Octets64},%{Acct-Output-Octets64},%{Acct-Input-Packets},%{Acct-Output-Packets}"

    start {
      query = "UPDATE radius.accounting SET \
        (termination_cause, ${..cols} ) \
        = (NULL, ${..values}) WHERE class = (convert_from(decode(substring('%{Class}' from 3),'hex'),'UTF8'))::uuid " 
      query = "INSERT INTO radius.accounting \
        (termination_cause, ${..cols} ) \
        VALUES (NULL, ${..values} )"
    }
    interim-update {
      query = "UPDATE radius.accounting SET \
        (termination_cause, ${..cols}, ${..cols2} ) \
        = (NULL, ${..values}, ${..values2}) WHERE class = (convert_from(decode(substring('%{Class}' from 3),'hex'),'UTF8'))::uuid " 
      query = "INSERT INTO radius.accounting \
        (termination_cause, ${..cols}, ${..cols2} ) \
        VALUES (NULL, ${..values} , ${..values2})"
    }
    stop {
      query = "UPDATE radius.accounting SET \
        (termination_cause, ${..cols}, ${..cols2} ) \
        = (%{integer:Acct-Terminate-Cause}, ${..values}, ${..values2}) WHERE class = (convert_from(decode(substring('%{Class}' from 3),'hex'),'UTF8'))::uuid " 
      query = "INSERT INTO radius.accounting \
        (termination_cause, ${..cols}, ${..cols2} ) \
        VALUES (%{integer:Acct-Terminate-Cause}, ${..values}, ${..values2} )"
    }
  }
}
